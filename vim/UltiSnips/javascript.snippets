#######################################################################################################################
#                                                       Defined                                                       #
########################################################################################################################
snippet const "const = " b
const ${1} = ${0}
endsnippet

snippet let "let = " b
let ${1} = ${0}
endsnippet

snippet var "var = " b
var ${1} = ${0}
endsnippet

########################################################################################################################
#                                                   Import / Require                                                   #
########################################################################################################################
snippet re "const ... = require(...)" b
const ${1} = require('${2}')
endsnippet

snippet im "import ... from ..." b
import ${1} from '${2}'
endsnippet

snippet imm "import { ... } from ..." b
import { ${1} } from '${2}'
endsnippet

snippet imas "import * as ... from ..." b
import * as ${1} from '${2}'
endsnippet

########################################################################################################################
#                                                       Control                                                        #
########################################################################################################################
snippet if "if ..." b
if (${1}) {
	${0:${VISUAL}}
}
endsnippet

snippet el "else ..."
else {
	${0:${VISUAL}}
}
endsnippet

snippet elif "else if ..."
else if (${1}) {
	${0:${VISUAL}}
}
endsnippet

snippet ?: "tertiary conditional"
${1:/* condition */} ? ${2:/* if true */} : ${0:/* if false */}
endsnippet

snippet sw "switch ..." b
switch (${1}) {
	case ${2}:
		${3}
		break
	${4}
	default:
		${5}
}
endsnippet

snippet case "case ..." b
case ${1}:
	${2}
	break
endsnippet

snippet try "try ... catch(e) ..." b
try {
	${0:${VISUAL}}
} catch (${1:err}) {${2}}
endsnippet

snippet tryf "try ... catch(e) ... finally ..." b
try {
	${0:${VISUAL}}
} catch (${1:err}) {
	${2}
} finally {
	${3}
}
endsnippet

snippet throw "thorw Error"
throw new Error(${1})
endsnippet

snippet ret "return"
return ${0}
endsnippet

snippet for "for ..." b
for (${1}) {
	${0:${VISUAL}}
}
endsnippet

snippet while "while ..." b
while (${1}) {
	${0:${VISUAL}}
}
endsnippet


snippet do "do ..." b
do {
	${0:${VISUAL}}
} while (${1});
endsnippet

########################################################################################################################
#                                                       Function                                                       #
########################################################################################################################

snippet pro "prototype"
${1:class}.prototype.${2:method}
endsnippet

snippet func "function" i
function ${1}(${2}) {
	${0:${VISUAL}}
}
endsnippet

snippet varf "var function" b
var ${1} = function(${2}) {
	${0:${VISUAL}}
}
endsnippet

snippet iife "iife function" b
(function (${1}) {
 ${0:${VISUAL}}
 }(${2}))
endsnippet

snippet ;f "iife function" b
;(function (${1}) {
		${0:${VISUAL}}
		}(${2}))
endsnippet

snippet fun* "generator function" i
function* ${1}(${2}) {
	${0:${VISUAL}}
}
endsnippet

snippet => "arrow function" i
(${1}) => {
	${0:${VISUAL}}
}
endsnippet

########################################################################################################################
#                                                        Class                                                         #
########################################################################################################################
snippet cla "class ..." b
class ${1} {
	${0:${VISUAL}}
}
endsnippet

snippet clax "class ... extends ..." b
class ${1} extends ${2} {
	${0:${VISUAL}}
}
endsnippet

snippet clac "class ... { constructor() ... }" b
class ${1} {
	constructor(${2}) {
		${0:${VISUAL}}
	}
}
endsnippet

snippet con "constructor () { ... }" b
constructor(${1}) {
	${0:${VISUAL}}
}
endsnippet

########################################################################################################################
#                                                        Object                                                        #
########################################################################################################################
snippet :f "object method" b
${1:method}: function (${2}) {
	${0:${VISUAL}}
},
endsnippet

snippet has "hasOwnProperty" i
hasOwnProperty(${0})
endsnippet

########################################################################################################################
#                                                         DOM                                                          #
########################################################################################################################
snippet by. "elements by class" b
${1:document}.getElementsByClassName('${0}')
endsnippet

snippet by# "element by id" b
${1:document}.getElementById('${0}')
endsnippet

snippet qs "query selector" b
${1:document}.querySelector('${0}')
endsnippet

snippet qsa "query selector all" b
${1:document}.querySelectorAll('${0}')
endsnippet

########################################################################################################################
#                                                        Debug                                                         #
########################################################################################################################
snippet de "debugger" b
debugger
endsnippet

snippet log "console.log" b
console.log(${0})
endsnippet

snippet debug "console.debug" b
console.debug(${0})
endsnippet

########################################################################################################################
#                                                         Misc                                                         #
########################################################################################################################
snippet #! "shebang"
#!/usr/bin/env node
endsnippet

snippet us "use strict"
'use strict'
endsnippet

snippet sett "set timeout"
setTimeout(function () {
	${0:${VISUAL}}
}, ${1:0});
endsnippet

########################################################################################################################
#                                                        Exports                                                        #
########################################################################################################################
snippet ed "exports defaulr"
export default ${0}
endsnippet

snippet ex "module.exports"
module.exports = $1;
endsnippet
