snippet im "import xyz from 'xyz'"
	import ${2} from '${1}';
snippet imas "import * as xyz from 'xyz'"
	import * as ${2} from '${1}';
snippet imm "import { member } from 'xyz'"
	import { ${2} } from '${1}';
snippet em "export * from 'xyz'"
	export * from '${1}';
snippet ed "export default xyz"
	export default ${1};

snippet func "function"
	function ${1:function_name}(${2}) {
		${0:${VISUAL}}
	}
snippet afunc "async function"
	async function ${1:function_name}(${2}) {
		${0:${VISUAL}}
	}

snippet if "if (condition) { ... }"
	if (${1:true}) {
		${0:${VISUAL}}
	}
snippet ife "if (condition) { ... } else { ... }"
	if (${1:true}) {
		${0:${VISUAL}}
	} else {
		${2}
	}
snippet sw "switch (condition) { ... }"
	switch (${1:expression}) {
		case '${3:case}':
			${4}
			break;
		${0}
		default:
			${2}
	}
snippet try "try { ... } catch(e) { ... }"
	try {
		${0:${VISUAL}}
	} catch (${1:e}) {
		${2:/* handle error */}
	}
snippet tryf "try { ... } catch(e) { ... } finally { ... }"
	try {
		${0:${VISUAL}}
	} catch (${1:e}) {
		${2:/* handle error */}
	} finally {
		${3:/* be executed regardless of the try / catch result*/}
	}

snippet cl "console.log"
	console.log(${1});
snippet ce "console.error"
	console.error(${1})

snippet jsonp
	JSON.parse(${0:jstr});
snippet jsons
	JSON.stringify(${0:object});

snippet cla
	class ${1} {
		${0:${VISUAL}}
	}
snippet clax
	class ${1} extends ${2} {
		${0:${VISUAL}}
	}
snippet clac
	class ${1} {
		constructor(${2}) {
			${0:${VISUAL}}
		}
	}
